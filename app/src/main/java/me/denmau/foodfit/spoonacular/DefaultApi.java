/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.denmau.foodfit.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.io.File;
import com.spoonacular.client.model.InlineObject10;
import com.spoonacular.client.model.InlineObject11;
import com.spoonacular.client.model.InlineObject12;
import com.spoonacular.client.model.InlineObject13;
import com.spoonacular.client.model.InlineObject14;
import com.spoonacular.client.model.InlineObject15;
import com.spoonacular.client.model.InlineObject9;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addToMealPlan
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject11  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public okhttp3.Call addToMealPlanCall(String username, String hash, InlineObject11 inlineObject11, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject11;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/items"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToMealPlanValidateBeforeCall(String username, String hash, InlineObject11 inlineObject11, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addToMealPlan(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling addToMealPlan(Async)");
        }
        
        // verify the required parameter 'inlineObject11' is set
        if (inlineObject11 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject11' when calling addToMealPlan(Async)");
        }
        

        okhttp3.Call localVarCall = addToMealPlanCall(username, hash, inlineObject11, _callback);
        return localVarCall;

    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject11  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public Object addToMealPlan(String username, String hash, InlineObject11 inlineObject11) throws ApiException {
        ApiResponse<Object> localVarResp = addToMealPlanWithHttpInfo(username, hash, inlineObject11);
        return localVarResp.getData();
    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject11  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public ApiResponse<Object> addToMealPlanWithHttpInfo(String username, String hash, InlineObject11 inlineObject11) throws ApiException {
        okhttp3.Call localVarCall = addToMealPlanValidateBeforeCall(username, hash, inlineObject11, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add to Meal Plan (asynchronously)
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject11  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public okhttp3.Call addToMealPlanAsync(String username, String hash, InlineObject11 inlineObject11, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToMealPlanValidateBeforeCall(username, hash, inlineObject11, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addToShoppingList
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject14  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public okhttp3.Call addToShoppingListCall(String username, String hash, InlineObject14 inlineObject14, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject14;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/items"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToShoppingListValidateBeforeCall(String username, String hash, InlineObject14 inlineObject14, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addToShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling addToShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject14' is set
        if (inlineObject14 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject14' when calling addToShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = addToShoppingListCall(username, hash, inlineObject14, _callback);
        return localVarCall;

    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject14  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public Object addToShoppingList(String username, String hash, InlineObject14 inlineObject14) throws ApiException {
        ApiResponse<Object> localVarResp = addToShoppingListWithHttpInfo(username, hash, inlineObject14);
        return localVarResp.getData();
    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject14  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public ApiResponse<Object> addToShoppingListWithHttpInfo(String username, String hash, InlineObject14 inlineObject14) throws ApiException {
        okhttp3.Call localVarCall = addToShoppingListValidateBeforeCall(username, hash, inlineObject14, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add to Shopping List (asynchronously)
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject14  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public okhttp3.Call addToShoppingListAsync(String username, String hash, InlineObject14 inlineObject14, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToShoppingListValidateBeforeCall(username, hash, inlineObject14, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeARecipeSearchQuery
     * @param q The recipe search query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public okhttp3.Call analyzeARecipeSearchQueryCall(String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/queries/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeARecipeSearchQueryValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling analyzeARecipeSearchQuery(Async)");
        }
        

        okhttp3.Call localVarCall = analyzeARecipeSearchQueryCall(q, _callback);
        return localVarCall;

    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public Object analyzeARecipeSearchQuery(String q) throws ApiException {
        ApiResponse<Object> localVarResp = analyzeARecipeSearchQueryWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public ApiResponse<Object> analyzeARecipeSearchQueryWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = analyzeARecipeSearchQueryValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze a Recipe Search Query (asynchronously)
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public okhttp3.Call analyzeARecipeSearchQueryAsync(String q, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeARecipeSearchQueryValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeRecipeInstructions
     * @param instructions The instructions to be analyzed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public okhttp3.Call analyzeRecipeInstructionsCall(String instructions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/analyzeInstructions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (instructions != null) {
            localVarFormParams.put("instructions", instructions);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeRecipeInstructionsValidateBeforeCall(String instructions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'instructions' is set
        if (instructions == null) {
            throw new ApiException("Missing the required parameter 'instructions' when calling analyzeRecipeInstructions(Async)");
        }
        

        okhttp3.Call localVarCall = analyzeRecipeInstructionsCall(instructions, _callback);
        return localVarCall;

    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param instructions The instructions to be analyzed. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public Object analyzeRecipeInstructions(String instructions) throws ApiException {
        ApiResponse<Object> localVarResp = analyzeRecipeInstructionsWithHttpInfo(instructions);
        return localVarResp.getData();
    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param instructions The instructions to be analyzed. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public ApiResponse<Object> analyzeRecipeInstructionsWithHttpInfo(String instructions) throws ApiException {
        okhttp3.Call localVarCall = analyzeRecipeInstructionsValidateBeforeCall(instructions, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze Recipe Instructions (asynchronously)
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param instructions The instructions to be analyzed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public okhttp3.Call analyzeRecipeInstructionsAsync(String instructions, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeRecipeInstructionsValidateBeforeCall(instructions, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteIngredientSearch
     * @param query The partial or full ingredient name. (required)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public okhttp3.Call autocompleteIngredientSearchCall(String query, BigDecimal number, Boolean metaInformation, String intolerances, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/ingredients/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (metaInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metaInformation", metaInformation));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteIngredientSearchValidateBeforeCall(String query, BigDecimal number, Boolean metaInformation, String intolerances, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocompleteIngredientSearch(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteIngredientSearchCall(query, number, metaInformation, intolerances, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The partial or full ingredient name. (required)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public Object autocompleteIngredientSearch(String query, BigDecimal number, Boolean metaInformation, String intolerances) throws ApiException {
        ApiResponse<Object> localVarResp = autocompleteIngredientSearchWithHttpInfo(query, number, metaInformation, intolerances);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The partial or full ingredient name. (required)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public ApiResponse<Object> autocompleteIngredientSearchWithHttpInfo(String query, BigDecimal number, Boolean metaInformation, String intolerances) throws ApiException {
        okhttp3.Call localVarCall = autocompleteIngredientSearchValidateBeforeCall(query, number, metaInformation, intolerances, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Ingredient Search (asynchronously)
     * Autocomplete the entry of an ingredient.
     * @param query The partial or full ingredient name. (required)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public okhttp3.Call autocompleteIngredientSearchAsync(String query, BigDecimal number, Boolean metaInformation, String intolerances, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteIngredientSearchValidateBeforeCall(query, number, metaInformation, intolerances, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteMenuItemSearch
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search">Autocomplete Menu Item Search Documentation</a>
     */
    public okhttp3.Call autocompleteMenuItemSearchCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/menuItems/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteMenuItemSearchValidateBeforeCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocompleteMenuItemSearch(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteMenuItemSearchCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Menu Item Search
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search">Autocomplete Menu Item Search Documentation</a>
     */
    public Object autocompleteMenuItemSearch(String query, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = autocompleteMenuItemSearchWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Menu Item Search
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search">Autocomplete Menu Item Search Documentation</a>
     */
    public ApiResponse<Object> autocompleteMenuItemSearchWithHttpInfo(String query, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = autocompleteMenuItemSearchValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Menu Item Search (asynchronously)
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search">Autocomplete Menu Item Search Documentation</a>
     */
    public okhttp3.Call autocompleteMenuItemSearchAsync(String query, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteMenuItemSearchValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteProductSearch
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public okhttp3.Call autocompleteProductSearchCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteProductSearchValidateBeforeCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocompleteProductSearch(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteProductSearchCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public Object autocompleteProductSearch(String query, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = autocompleteProductSearchWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public ApiResponse<Object> autocompleteProductSearchWithHttpInfo(String query, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = autocompleteProductSearchValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Product Search (asynchronously)
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public okhttp3.Call autocompleteProductSearchAsync(String query, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteProductSearchValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteRecipeSearch
     * @param query The query to be autocompleted. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public okhttp3.Call autocompleteRecipeSearchCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteRecipeSearchValidateBeforeCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocompleteRecipeSearch(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteRecipeSearchCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The query to be autocompleted. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public Object autocompleteRecipeSearch(String query, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = autocompleteRecipeSearchWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The query to be autocompleted. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public ApiResponse<Object> autocompleteRecipeSearchWithHttpInfo(String query, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = autocompleteRecipeSearchValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Recipe Search (asynchronously)
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The query to be autocompleted. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public okhttp3.Call autocompleteRecipeSearchAsync(String query, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteRecipeSearchValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyCuisine
     * @param title The title of the recipe. (required)
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public okhttp3.Call classifyCuisineCall(String title, String ingredientList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/cuisine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyCuisineValidateBeforeCall(String title, String ingredientList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling classifyCuisine(Async)");
        }
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling classifyCuisine(Async)");
        }
        

        okhttp3.Call localVarCall = classifyCuisineCall(title, ingredientList, _callback);
        return localVarCall;

    }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param title The title of the recipe. (required)
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public Object classifyCuisine(String title, String ingredientList) throws ApiException {
        ApiResponse<Object> localVarResp = classifyCuisineWithHttpInfo(title, ingredientList);
        return localVarResp.getData();
    }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param title The title of the recipe. (required)
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public ApiResponse<Object> classifyCuisineWithHttpInfo(String title, String ingredientList) throws ApiException {
        okhttp3.Call localVarCall = classifyCuisineValidateBeforeCall(title, ingredientList, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Cuisine (asynchronously)
     * Classify the recipe&#39;s cuisine.
     * @param title The title of the recipe. (required)
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public okhttp3.Call classifyCuisineAsync(String title, String ingredientList, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyCuisineValidateBeforeCall(title, ingredientList, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyGroceryProduct
     * @param inlineObject9  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductCall(InlineObject9 inlineObject9, String locale, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject9;

        // create path and map variables
        String localVarPath = "/food/products/classify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyGroceryProductValidateBeforeCall(InlineObject9 inlineObject9, String locale, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject9' is set
        if (inlineObject9 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject9' when calling classifyGroceryProduct(Async)");
        }
        

        okhttp3.Call localVarCall = classifyGroceryProductCall(inlineObject9, locale, _callback);
        return localVarCall;

    }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param inlineObject9  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public Object classifyGroceryProduct(InlineObject9 inlineObject9, String locale) throws ApiException {
        ApiResponse<Object> localVarResp = classifyGroceryProductWithHttpInfo(inlineObject9, locale);
        return localVarResp.getData();
    }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param inlineObject9  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public ApiResponse<Object> classifyGroceryProductWithHttpInfo(InlineObject9 inlineObject9, String locale) throws ApiException {
        okhttp3.Call localVarCall = classifyGroceryProductValidateBeforeCall(inlineObject9, locale, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Grocery Product (asynchronously)
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param inlineObject9  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductAsync(InlineObject9 inlineObject9, String locale, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyGroceryProductValidateBeforeCall(inlineObject9, locale, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyGroceryProductBulk
     * @param requestBody  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductBulkCall(List<Object> requestBody, String locale, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/food/products/classifyBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyGroceryProductBulkValidateBeforeCall(List<Object> requestBody, String locale, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling classifyGroceryProductBulk(Async)");
        }
        

        okhttp3.Call localVarCall = classifyGroceryProductBulkCall(requestBody, locale, _callback);
        return localVarCall;

    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param requestBody  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public Object classifyGroceryProductBulk(List<Object> requestBody, String locale) throws ApiException {
        ApiResponse<Object> localVarResp = classifyGroceryProductBulkWithHttpInfo(requestBody, locale);
        return localVarResp.getData();
    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param requestBody  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public ApiResponse<Object> classifyGroceryProductBulkWithHttpInfo(List<Object> requestBody, String locale) throws ApiException {
        okhttp3.Call localVarCall = classifyGroceryProductBulkValidateBeforeCall(requestBody, locale, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Grocery Product Bulk (asynchronously)
     * Provide a set of product jsons, get back classified products.
     * @param requestBody  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductBulkAsync(List<Object> requestBody, String locale, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyGroceryProductBulkValidateBeforeCall(requestBody, locale, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearMealPlanDay
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject10  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public okhttp3.Call clearMealPlanDayCall(String username, String date, String hash, InlineObject10 inlineObject10, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject10;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/day/{date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "date" + "\\}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMealPlanDayValidateBeforeCall(String username, String date, String hash, InlineObject10 inlineObject10, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'inlineObject10' is set
        if (inlineObject10 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject10' when calling clearMealPlanDay(Async)");
        }
        

        okhttp3.Call localVarCall = clearMealPlanDayCall(username, date, hash, inlineObject10, _callback);
        return localVarCall;

    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject10  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public Object clearMealPlanDay(String username, String date, String hash, InlineObject10 inlineObject10) throws ApiException {
        ApiResponse<Object> localVarResp = clearMealPlanDayWithHttpInfo(username, date, hash, inlineObject10);
        return localVarResp.getData();
    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject10  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public ApiResponse<Object> clearMealPlanDayWithHttpInfo(String username, String date, String hash, InlineObject10 inlineObject10) throws ApiException {
        okhttp3.Call localVarCall = clearMealPlanDayValidateBeforeCall(username, date, hash, inlineObject10, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear Meal Plan Day (asynchronously)
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject10  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public okhttp3.Call clearMealPlanDayAsync(String username, String date, String hash, InlineObject10 inlineObject10, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMealPlanDayValidateBeforeCall(username, date, hash, inlineObject10, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeGlycemicLoad
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public okhttp3.Call computeGlycemicLoadCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/food/ingredients/glycemicLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeGlycemicLoadValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling computeGlycemicLoad(Async)");
        }
        

        okhttp3.Call localVarCall = computeGlycemicLoadCall(body, _callback);
        return localVarCall;

    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public Object computeGlycemicLoad(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = computeGlycemicLoadWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public ApiResponse<Object> computeGlycemicLoadWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = computeGlycemicLoadValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute Glycemic Load (asynchronously)
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public okhttp3.Call computeGlycemicLoadAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeGlycemicLoadValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectUser
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public okhttp3.Call connectUserCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectUserValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling connectUser(Async)");
        }
        

        okhttp3.Call localVarCall = connectUserCall(body, _callback);
        return localVarCall;

    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public Object connectUser(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = connectUserWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public ApiResponse<Object> connectUserWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = connectUserValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connect User (asynchronously)
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public okhttp3.Call connectUserAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectUserValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertAmounts
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public okhttp3.Call convertAmountsCall(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ingredientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredientName", ingredientName));
        }

        if (sourceAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmount", sourceAmount));
        }

        if (sourceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceUnit", sourceUnit));
        }

        if (targetUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetUnit", targetUnit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertAmountsValidateBeforeCall(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientName' is set
        if (ingredientName == null) {
            throw new ApiException("Missing the required parameter 'ingredientName' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'sourceAmount' is set
        if (sourceAmount == null) {
            throw new ApiException("Missing the required parameter 'sourceAmount' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'sourceUnit' is set
        if (sourceUnit == null) {
            throw new ApiException("Missing the required parameter 'sourceUnit' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'targetUnit' is set
        if (targetUnit == null) {
            throw new ApiException("Missing the required parameter 'targetUnit' when calling convertAmounts(Async)");
        }
        

        okhttp3.Call localVarCall = convertAmountsCall(ingredientName, sourceAmount, sourceUnit, targetUnit, _callback);
        return localVarCall;

    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public Object convertAmounts(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
        ApiResponse<Object> localVarResp = convertAmountsWithHttpInfo(ingredientName, sourceAmount, sourceUnit, targetUnit);
        return localVarResp.getData();
    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public ApiResponse<Object> convertAmountsWithHttpInfo(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
        okhttp3.Call localVarCall = convertAmountsValidateBeforeCall(ingredientName, sourceAmount, sourceUnit, targetUnit, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert Amounts (asynchronously)
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public okhttp3.Call convertAmountsAsync(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertAmountsValidateBeforeCall(ingredientName, sourceAmount, sourceUnit, targetUnit, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRecipeCard
     * @param title The title of the recipe. (required)
     * @param image The binary image of the recipe as jpg. (required)
     * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). (required)
     * @param readyInMinutes The number of minutes it takes to get the recipe on the table. (required)
     * @param servings The number of servings the recipe makes. (required)
     * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). (required)
     * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). (required)
     * @param author The author of the recipe. (optional)
     * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
     * @param fontColor The font color for the recipe card as a hex-string. (optional)
     * @param source The source of the recipe. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public okhttp3.Call createRecipeCardCall(String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizeRecipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (ingredients != null) {
            localVarFormParams.put("ingredients", ingredients);
        }

        if (instructions != null) {
            localVarFormParams.put("instructions", instructions);
        }

        if (readyInMinutes != null) {
            localVarFormParams.put("readyInMinutes", readyInMinutes);
        }

        if (servings != null) {
            localVarFormParams.put("servings", servings);
        }

        if (mask != null) {
            localVarFormParams.put("mask", mask);
        }

        if (backgroundImage != null) {
            localVarFormParams.put("backgroundImage", backgroundImage);
        }

        if (author != null) {
            localVarFormParams.put("author", author);
        }

        if (backgroundColor != null) {
            localVarFormParams.put("backgroundColor", backgroundColor);
        }

        if (fontColor != null) {
            localVarFormParams.put("fontColor", fontColor);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecipeCardValidateBeforeCall(String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'ingredients' is set
        if (ingredients == null) {
            throw new ApiException("Missing the required parameter 'ingredients' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'instructions' is set
        if (instructions == null) {
            throw new ApiException("Missing the required parameter 'instructions' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'readyInMinutes' is set
        if (readyInMinutes == null) {
            throw new ApiException("Missing the required parameter 'readyInMinutes' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'servings' is set
        if (servings == null) {
            throw new ApiException("Missing the required parameter 'servings' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'mask' is set
        if (mask == null) {
            throw new ApiException("Missing the required parameter 'mask' when calling createRecipeCard(Async)");
        }
        
        // verify the required parameter 'backgroundImage' is set
        if (backgroundImage == null) {
            throw new ApiException("Missing the required parameter 'backgroundImage' when calling createRecipeCard(Async)");
        }
        

        okhttp3.Call localVarCall = createRecipeCardCall(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, _callback);
        return localVarCall;

    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param title The title of the recipe. (required)
     * @param image The binary image of the recipe as jpg. (required)
     * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). (required)
     * @param readyInMinutes The number of minutes it takes to get the recipe on the table. (required)
     * @param servings The number of servings the recipe makes. (required)
     * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). (required)
     * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). (required)
     * @param author The author of the recipe. (optional)
     * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
     * @param fontColor The font color for the recipe card as a hex-string. (optional)
     * @param source The source of the recipe. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public Object createRecipeCard(String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source) throws ApiException {
        ApiResponse<Object> localVarResp = createRecipeCardWithHttpInfo(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source);
        return localVarResp.getData();
    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param title The title of the recipe. (required)
     * @param image The binary image of the recipe as jpg. (required)
     * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). (required)
     * @param readyInMinutes The number of minutes it takes to get the recipe on the table. (required)
     * @param servings The number of servings the recipe makes. (required)
     * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). (required)
     * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). (required)
     * @param author The author of the recipe. (optional)
     * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
     * @param fontColor The font color for the recipe card as a hex-string. (optional)
     * @param source The source of the recipe. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public ApiResponse<Object> createRecipeCardWithHttpInfo(String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source) throws ApiException {
        okhttp3.Call localVarCall = createRecipeCardValidateBeforeCall(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Recipe Card (asynchronously)
     * Generate a recipe card for a recipe.
     * @param title The title of the recipe. (required)
     * @param image The binary image of the recipe as jpg. (required)
     * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
     * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). (required)
     * @param readyInMinutes The number of minutes it takes to get the recipe on the table. (required)
     * @param servings The number of servings the recipe makes. (required)
     * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). (required)
     * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). (required)
     * @param author The author of the recipe. (optional)
     * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
     * @param fontColor The font color for the recipe card as a hex-string. (optional)
     * @param source The source of the recipe. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public okhttp3.Call createRecipeCardAsync(String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecipeCardValidateBeforeCall(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFromMealPlan
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject12  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public okhttp3.Call deleteFromMealPlanCall(String username, BigDecimal id, String hash, InlineObject12 inlineObject12, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject12;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/items/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromMealPlanValidateBeforeCall(String username, BigDecimal id, String hash, InlineObject12 inlineObject12, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'inlineObject12' is set
        if (inlineObject12 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject12' when calling deleteFromMealPlan(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFromMealPlanCall(username, id, hash, inlineObject12, _callback);
        return localVarCall;

    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject12  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public Object deleteFromMealPlan(String username, BigDecimal id, String hash, InlineObject12 inlineObject12) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFromMealPlanWithHttpInfo(username, id, hash, inlineObject12);
        return localVarResp.getData();
    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject12  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public ApiResponse<Object> deleteFromMealPlanWithHttpInfo(String username, BigDecimal id, String hash, InlineObject12 inlineObject12) throws ApiException {
        okhttp3.Call localVarCall = deleteFromMealPlanValidateBeforeCall(username, id, hash, inlineObject12, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete from Meal Plan (asynchronously)
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject12  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public okhttp3.Call deleteFromMealPlanAsync(String username, BigDecimal id, String hash, InlineObject12 inlineObject12, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromMealPlanValidateBeforeCall(username, id, hash, inlineObject12, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFromShoppingList
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject15  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public okhttp3.Call deleteFromShoppingListCall(String username, BigDecimal id, String hash, InlineObject15 inlineObject15, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject15;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/items/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromShoppingListValidateBeforeCall(String username, BigDecimal id, String hash, InlineObject15 inlineObject15, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject15' is set
        if (inlineObject15 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject15' when calling deleteFromShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFromShoppingListCall(username, id, hash, inlineObject15, _callback);
        return localVarCall;

    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject15  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public Object deleteFromShoppingList(String username, BigDecimal id, String hash, InlineObject15 inlineObject15) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFromShoppingListWithHttpInfo(username, id, hash, inlineObject15);
        return localVarResp.getData();
    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject15  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public ApiResponse<Object> deleteFromShoppingListWithHttpInfo(String username, BigDecimal id, String hash, InlineObject15 inlineObject15) throws ApiException {
        okhttp3.Call localVarCall = deleteFromShoppingListValidateBeforeCall(username, id, hash, inlineObject15, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete from Shopping List (asynchronously)
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject15  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public okhttp3.Call deleteFromShoppingListAsync(String username, BigDecimal id, String hash, InlineObject15 inlineObject15, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromShoppingListValidateBeforeCall(username, id, hash, inlineObject15, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectFoodInText
     * @param text The text in which food items, such as dish names and ingredients, should be detected in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public okhttp3.Call detectFoodInTextCall(String text, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/detect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (text != null) {
            localVarFormParams.put("text", text);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectFoodInTextValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling detectFoodInText(Async)");
        }
        

        okhttp3.Call localVarCall = detectFoodInTextCall(text, _callback);
        return localVarCall;

    }

    /**
     * Detect Food in Text
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param text The text in which food items, such as dish names and ingredients, should be detected in. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public Object detectFoodInText(String text) throws ApiException {
        ApiResponse<Object> localVarResp = detectFoodInTextWithHttpInfo(text);
        return localVarResp.getData();
    }

    /**
     * Detect Food in Text
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param text The text in which food items, such as dish names and ingredients, should be detected in. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public ApiResponse<Object> detectFoodInTextWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = detectFoodInTextValidateBeforeCall(text, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect Food in Text (asynchronously)
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param text The text in which food items, such as dish names and ingredients, should be detected in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public okhttp3.Call detectFoodInTextAsync(String text, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectFoodInTextValidateBeforeCall(text, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractRecipeFromWebsite
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public okhttp3.Call extractRecipeFromWebsiteCall(String url, Boolean forceExtraction, Boolean analyze, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (forceExtraction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceExtraction", forceExtraction));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractRecipeFromWebsiteValidateBeforeCall(String url, Boolean forceExtraction, Boolean analyze, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractRecipeFromWebsite(Async)");
        }
        

        okhttp3.Call localVarCall = extractRecipeFromWebsiteCall(url, forceExtraction, analyze, _callback);
        return localVarCall;

    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public Object extractRecipeFromWebsite(String url, Boolean forceExtraction, Boolean analyze) throws ApiException {
        ApiResponse<Object> localVarResp = extractRecipeFromWebsiteWithHttpInfo(url, forceExtraction, analyze);
        return localVarResp.getData();
    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public ApiResponse<Object> extractRecipeFromWebsiteWithHttpInfo(String url, Boolean forceExtraction, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = extractRecipeFromWebsiteValidateBeforeCall(url, forceExtraction, analyze, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract Recipe from Website (asynchronously)
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public okhttp3.Call extractRecipeFromWebsiteAsync(String url, Boolean forceExtraction, Boolean analyze, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractRecipeFromWebsiteValidateBeforeCall(url, forceExtraction, analyze, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMealPlan
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public okhttp3.Call generateMealPlanCall(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (targetCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetCalories", targetCalories));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMealPlanValidateBeforeCall(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateMealPlanCall(timeFrame, targetCalories, diet, exclude, _callback);
        return localVarCall;

    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public Object generateMealPlan(String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
        ApiResponse<Object> localVarResp = generateMealPlanWithHttpInfo(timeFrame, targetCalories, diet, exclude);
        return localVarResp.getData();
    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public ApiResponse<Object> generateMealPlanWithHttpInfo(String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
        okhttp3.Call localVarCall = generateMealPlanValidateBeforeCall(timeFrame, targetCalories, diet, exclude, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Meal Plan (asynchronously)
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public okhttp3.Call generateMealPlanAsync(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMealPlanValidateBeforeCall(timeFrame, targetCalories, diet, exclude, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateShoppingList
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject13  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public okhttp3.Call generateShoppingListCall(String username, String startDate, String endDate, String hash, InlineObject13 inlineObject13, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject13;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "start-date" + "\\}", localVarApiClient.escapeString(startDate.toString()))
            .replaceAll("\\{" + "end-date" + "\\}", localVarApiClient.escapeString(endDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateShoppingListValidateBeforeCall(String username, String startDate, String endDate, String hash, InlineObject13 inlineObject13, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject13' is set
        if (inlineObject13 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject13' when calling generateShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = generateShoppingListCall(username, startDate, endDate, hash, inlineObject13, _callback);
        return localVarCall;

    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject13  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public Object generateShoppingList(String username, String startDate, String endDate, String hash, InlineObject13 inlineObject13) throws ApiException {
        ApiResponse<Object> localVarResp = generateShoppingListWithHttpInfo(username, startDate, endDate, hash, inlineObject13);
        return localVarResp.getData();
    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject13  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public ApiResponse<Object> generateShoppingListWithHttpInfo(String username, String startDate, String endDate, String hash, InlineObject13 inlineObject13) throws ApiException {
        okhttp3.Call localVarCall = generateShoppingListValidateBeforeCall(username, startDate, endDate, hash, inlineObject13, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Shopping List (asynchronously)
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject13  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public okhttp3.Call generateShoppingListAsync(String username, String startDate, String endDate, String hash, InlineObject13 inlineObject13, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateShoppingListValidateBeforeCall(username, startDate, endDate, hash, inlineObject13, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getARandomFoodJoke
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke">Get a Random Food Joke Documentation</a>
     */
    public okhttp3.Call getARandomFoodJokeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/jokes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getARandomFoodJokeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getARandomFoodJokeCall(_callback);
        return localVarCall;

    }

    /**
     * Get a Random Food Joke
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke">Get a Random Food Joke Documentation</a>
     */
    public Object getARandomFoodJoke() throws ApiException {
        ApiResponse<Object> localVarResp = getARandomFoodJokeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a Random Food Joke
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke">Get a Random Food Joke Documentation</a>
     */
    public ApiResponse<Object> getARandomFoodJokeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getARandomFoodJokeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Random Food Joke (asynchronously)
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke">Get a Random Food Joke Documentation</a>
     */
    public okhttp3.Call getARandomFoodJokeAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getARandomFoodJokeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyzedRecipeInstructions
     * @param id The recipe id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public okhttp3.Call getAnalyzedRecipeInstructionsCall(BigDecimal id, Boolean stepBreakdown, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/analyzedInstructions"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stepBreakdown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stepBreakdown", stepBreakdown));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyzedRecipeInstructionsValidateBeforeCall(BigDecimal id, Boolean stepBreakdown, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions(Async)");
        }
        

        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsCall(id, stepBreakdown, _callback);
        return localVarCall;

    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The recipe id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public Object getAnalyzedRecipeInstructions(BigDecimal id, Boolean stepBreakdown) throws ApiException {
        ApiResponse<Object> localVarResp = getAnalyzedRecipeInstructionsWithHttpInfo(id, stepBreakdown);
        return localVarResp.getData();
    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The recipe id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public ApiResponse<Object> getAnalyzedRecipeInstructionsWithHttpInfo(BigDecimal id, Boolean stepBreakdown) throws ApiException {
        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsValidateBeforeCall(id, stepBreakdown, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Analyzed Recipe Instructions (asynchronously)
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The recipe id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public okhttp3.Call getAnalyzedRecipeInstructionsAsync(BigDecimal id, Boolean stepBreakdown, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsValidateBeforeCall(id, stepBreakdown, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComparableProducts
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public okhttp3.Call getComparableProductsCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/upc/{upc}/comparable"
            .replaceAll("\\{" + "upc" + "\\}", localVarApiClient.escapeString(upc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComparableProductsValidateBeforeCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upc' is set
        if (upc == null) {
            throw new ApiException("Missing the required parameter 'upc' when calling getComparableProducts(Async)");
        }
        

        okhttp3.Call localVarCall = getComparableProductsCall(upc, _callback);
        return localVarCall;

    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public Object getComparableProducts(BigDecimal upc) throws ApiException {
        ApiResponse<Object> localVarResp = getComparableProductsWithHttpInfo(upc);
        return localVarResp.getData();
    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public ApiResponse<Object> getComparableProductsWithHttpInfo(BigDecimal upc) throws ApiException {
        okhttp3.Call localVarCall = getComparableProductsValidateBeforeCall(upc, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Comparable Products (asynchronously)
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public okhttp3.Call getComparableProductsAsync(BigDecimal upc, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComparableProductsValidateBeforeCall(upc, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationSuggests
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Conversation-Suggests">Get Conversation Suggests Documentation</a>
     */
    public okhttp3.Call getConversationSuggestsCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/converse/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationSuggestsValidateBeforeCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getConversationSuggests(Async)");
        }
        

        okhttp3.Call localVarCall = getConversationSuggestsCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Get Conversation Suggests
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Conversation-Suggests">Get Conversation Suggests Documentation</a>
     */
    public Object getConversationSuggests(String query, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = getConversationSuggestsWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Get Conversation Suggests
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Conversation-Suggests">Get Conversation Suggests Documentation</a>
     */
    public ApiResponse<Object> getConversationSuggestsWithHttpInfo(String query, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = getConversationSuggestsValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Conversation Suggests (asynchronously)
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Conversation-Suggests">Get Conversation Suggests Documentation</a>
     */
    public okhttp3.Call getConversationSuggestsAsync(String query, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationSuggestsValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDishPairingForWine
     * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine">Get Dish Pairing for Wine Documentation</a>
     */
    public okhttp3.Call getDishPairingForWineCall(String wine, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/wine/dishes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wine", wine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDishPairingForWineValidateBeforeCall(String wine, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wine' is set
        if (wine == null) {
            throw new ApiException("Missing the required parameter 'wine' when calling getDishPairingForWine(Async)");
        }
        

        okhttp3.Call localVarCall = getDishPairingForWineCall(wine, _callback);
        return localVarCall;

    }

    /**
     * Get Dish Pairing for Wine
     * Find a dish that goes well with a given wine.
     * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine">Get Dish Pairing for Wine Documentation</a>
     */
    public Object getDishPairingForWine(String wine) throws ApiException {
        ApiResponse<Object> localVarResp = getDishPairingForWineWithHttpInfo(wine);
        return localVarResp.getData();
    }

    /**
     * Get Dish Pairing for Wine
     * Find a dish that goes well with a given wine.
     * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine">Get Dish Pairing for Wine Documentation</a>
     */
    public ApiResponse<Object> getDishPairingForWineWithHttpInfo(String wine) throws ApiException {
        okhttp3.Call localVarCall = getDishPairingForWineValidateBeforeCall(wine, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Dish Pairing for Wine (asynchronously)
     * Find a dish that goes well with a given wine.
     * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine">Get Dish Pairing for Wine Documentation</a>
     */
    public okhttp3.Call getDishPairingForWineAsync(String wine, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDishPairingForWineValidateBeforeCall(wine, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientInformation
     * @param id The ingredient id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public okhttp3.Call getIngredientInformationCall(BigDecimal id, BigDecimal amount, String unit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/ingredients/{id}/information"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientInformationValidateBeforeCall(BigDecimal id, BigDecimal amount, String unit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIngredientInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientInformationCall(id, amount, unit, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The ingredient id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public Object getIngredientInformation(BigDecimal id, BigDecimal amount, String unit) throws ApiException {
        ApiResponse<Object> localVarResp = getIngredientInformationWithHttpInfo(id, amount, unit);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The ingredient id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public ApiResponse<Object> getIngredientInformationWithHttpInfo(BigDecimal id, BigDecimal amount, String unit) throws ApiException {
        okhttp3.Call localVarCall = getIngredientInformationValidateBeforeCall(id, amount, unit, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Information (asynchronously)
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The ingredient id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public okhttp3.Call getIngredientInformationAsync(BigDecimal id, BigDecimal amount, String unit, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientInformationValidateBeforeCall(id, amount, unit, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientSubstitutes
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesCall(String ingredientName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/ingredients/substitutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ingredientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredientName", ingredientName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientSubstitutesValidateBeforeCall(String ingredientName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientName' is set
        if (ingredientName == null) {
            throw new ApiException("Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientSubstitutesCall(ingredientName, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public Object getIngredientSubstitutes(String ingredientName) throws ApiException {
        ApiResponse<Object> localVarResp = getIngredientSubstitutesWithHttpInfo(ingredientName);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public ApiResponse<Object> getIngredientSubstitutesWithHttpInfo(String ingredientName) throws ApiException {
        okhttp3.Call localVarCall = getIngredientSubstitutesValidateBeforeCall(ingredientName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Substitutes (asynchronously)
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesAsync(String ingredientName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientSubstitutesValidateBeforeCall(ingredientName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientSubstitutesByID
     * @param id The id of the ingredient you want substitutes for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/ingredients/{id}/substitutes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientSubstitutesByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIngredientSubstitutesByID(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientSubstitutesByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The id of the ingredient you want substitutes for. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public Object getIngredientSubstitutesByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getIngredientSubstitutesByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The id of the ingredient you want substitutes for. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public ApiResponse<Object> getIngredientSubstitutesByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getIngredientSubstitutesByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Substitutes by ID (asynchronously)
     * Search for substitutes for a given ingredient.
     * @param id The id of the ingredient you want substitutes for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientSubstitutesByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanTemplate
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplateCall(String username, BigDecimal id, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/templates/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanTemplateValidateBeforeCall(String username, BigDecimal id, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanTemplate(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMealPlanTemplate(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanTemplateCall(username, id, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public Object getMealPlanTemplate(String username, BigDecimal id, String hash) throws ApiException {
        ApiResponse<Object> localVarResp = getMealPlanTemplateWithHttpInfo(username, id, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public ApiResponse<Object> getMealPlanTemplateWithHttpInfo(String username, BigDecimal id, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanTemplateValidateBeforeCall(username, id, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Template (asynchronously)
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplateAsync(String username, BigDecimal id, String hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanTemplateValidateBeforeCall(username, id, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanTemplates
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplatesCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/templates"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanTemplatesValidateBeforeCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanTemplates(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanTemplatesCall(username, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public Object getMealPlanTemplates(String username, String hash) throws ApiException {
        ApiResponse<Object> localVarResp = getMealPlanTemplatesWithHttpInfo(username, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public ApiResponse<Object> getMealPlanTemplatesWithHttpInfo(String username, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanTemplatesValidateBeforeCall(username, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Templates (asynchronously)
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplatesAsync(String username, String hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanTemplatesValidateBeforeCall(username, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanWeek
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public okhttp3.Call getMealPlanWeekCall(String username, String startDate, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/week/{start-date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "start-date" + "\\}", localVarApiClient.escapeString(startDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanWeekValidateBeforeCall(String username, String startDate, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanWeek(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getMealPlanWeek(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanWeekCall(username, startDate, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public Object getMealPlanWeek(String username, String startDate, String hash) throws ApiException {
        ApiResponse<Object> localVarResp = getMealPlanWeekWithHttpInfo(username, startDate, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public ApiResponse<Object> getMealPlanWeekWithHttpInfo(String username, String startDate, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanWeekValidateBeforeCall(username, startDate, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Week (asynchronously)
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public okhttp3.Call getMealPlanWeekAsync(String username, String startDate, String hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanWeekValidateBeforeCall(username, startDate, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMenuItemInformation
     * @param id The menu item id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Menu-Item-Information">Get Menu Item Information Documentation</a>
     */
    public okhttp3.Call getMenuItemInformationCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/menuItems/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMenuItemInformationValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMenuItemInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getMenuItemInformationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Menu Item Information
     * Use a menu item id to get all available information about a menu item, such as nutrition.
     * @param id The menu item id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Menu-Item-Information">Get Menu Item Information Documentation</a>
     */
    public Object getMenuItemInformation(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getMenuItemInformationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Menu Item Information
     * Use a menu item id to get all available information about a menu item, such as nutrition.
     * @param id The menu item id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Menu-Item-Information">Get Menu Item Information Documentation</a>
     */
    public ApiResponse<Object> getMenuItemInformationWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getMenuItemInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Menu Item Information (asynchronously)
     * Use a menu item id to get all available information about a menu item, such as nutrition.
     * @param id The menu item id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Menu-Item-Information">Get Menu Item Information Documentation</a>
     */
    public okhttp3.Call getMenuItemInformationAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMenuItemInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductInformation
     * @param id The id of the packaged food. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public okhttp3.Call getProductInformationCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductInformationValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getProductInformationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The id of the packaged food. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public Object getProductInformation(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getProductInformationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The id of the packaged food. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public ApiResponse<Object> getProductInformationWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getProductInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Information (asynchronously)
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The id of the packaged food. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public okhttp3.Call getProductInformationAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRandomFoodTrivia
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia">Get Random Food Trivia Documentation</a>
     */
    public okhttp3.Call getRandomFoodTriviaCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/trivia/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomFoodTriviaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRandomFoodTriviaCall(_callback);
        return localVarCall;

    }

    /**
     * Get Random Food Trivia
     * Returns random food trivia.
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia">Get Random Food Trivia Documentation</a>
     */
    public Object getRandomFoodTrivia() throws ApiException {
        ApiResponse<Object> localVarResp = getRandomFoodTriviaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Random Food Trivia
     * Returns random food trivia.
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia">Get Random Food Trivia Documentation</a>
     */
    public ApiResponse<Object> getRandomFoodTriviaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRandomFoodTriviaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Random Food Trivia (asynchronously)
     * Returns random food trivia.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia">Get Random Food Trivia Documentation</a>
     */
    public okhttp3.Call getRandomFoodTriviaAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomFoodTriviaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRandomRecipes
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public okhttp3.Call getRandomRecipesCall(Boolean limitLicense, String tags, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomRecipesValidateBeforeCall(Boolean limitLicense, String tags, BigDecimal number, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRandomRecipesCall(limitLicense, tags, number, _callback);
        return localVarCall;

    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public Object getRandomRecipes(Boolean limitLicense, String tags, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = getRandomRecipesWithHttpInfo(limitLicense, tags, number);
        return localVarResp.getData();
    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public ApiResponse<Object> getRandomRecipesWithHttpInfo(Boolean limitLicense, String tags, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = getRandomRecipesValidateBeforeCall(limitLicense, tags, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Random Recipes (asynchronously)
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public okhttp3.Call getRandomRecipesAsync(Boolean limitLicense, String tags, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomRecipesValidateBeforeCall(limitLicense, tags, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeEquipmentByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID">Get Recipe Equipment by ID Documentation</a>
     */
    public okhttp3.Call getRecipeEquipmentByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/equipmentWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeEquipmentByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeEquipmentByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeEquipmentByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID">Get Recipe Equipment by ID Documentation</a>
     */
    public Object getRecipeEquipmentByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeEquipmentByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID">Get Recipe Equipment by ID Documentation</a>
     */
    public ApiResponse<Object> getRecipeEquipmentByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeEquipmentByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Equipment by ID (asynchronously)
     * Get a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID">Get Recipe Equipment by ID Documentation</a>
     */
    public okhttp3.Call getRecipeEquipmentByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeEquipmentByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeInformation
     * @param id The id of the recipe. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public okhttp3.Call getRecipeInformationCall(BigDecimal id, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/information"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNutrition", includeNutrition));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeInformationValidateBeforeCall(BigDecimal id, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeInformationCall(id, includeNutrition, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The id of the recipe. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public Object getRecipeInformation(BigDecimal id, Boolean includeNutrition) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeInformationWithHttpInfo(id, includeNutrition);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The id of the recipe. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public ApiResponse<Object> getRecipeInformationWithHttpInfo(BigDecimal id, Boolean includeNutrition) throws ApiException {
        okhttp3.Call localVarCall = getRecipeInformationValidateBeforeCall(id, includeNutrition, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Information (asynchronously)
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The id of the recipe. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public okhttp3.Call getRecipeInformationAsync(BigDecimal id, Boolean includeNutrition, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeInformationValidateBeforeCall(id, includeNutrition, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeInformationBulk
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public okhttp3.Call getRecipeInformationBulkCall(String ids, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/informationBulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (includeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNutrition", includeNutrition));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeInformationBulkValidateBeforeCall(String ids, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getRecipeInformationBulk(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeInformationBulkCall(ids, includeNutrition, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public Object getRecipeInformationBulk(String ids, Boolean includeNutrition) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeInformationBulkWithHttpInfo(ids, includeNutrition);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public ApiResponse<Object> getRecipeInformationBulkWithHttpInfo(String ids, Boolean includeNutrition) throws ApiException {
        okhttp3.Call localVarCall = getRecipeInformationBulkValidateBeforeCall(ids, includeNutrition, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Information Bulk (asynchronously)
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public okhttp3.Call getRecipeInformationBulkAsync(String ids, Boolean includeNutrition, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeInformationBulkValidateBeforeCall(ids, includeNutrition, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeIngredientsByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID">Get Recipe Ingredients by ID Documentation</a>
     */
    public okhttp3.Call getRecipeIngredientsByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeIngredientsByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeIngredientsByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeIngredientsByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID">Get Recipe Ingredients by ID Documentation</a>
     */
    public Object getRecipeIngredientsByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeIngredientsByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID">Get Recipe Ingredients by ID Documentation</a>
     */
    public ApiResponse<Object> getRecipeIngredientsByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeIngredientsByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Ingredients by ID (asynchronously)
     * Get a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID">Get Recipe Ingredients by ID Documentation</a>
     */
    public okhttp3.Call getRecipeIngredientsByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeIngredientsByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeNutritionWidgetByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID">Get Recipe Nutrition Widget by ID Documentation</a>
     */
    public okhttp3.Call getRecipeNutritionWidgetByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeNutritionWidgetByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeNutritionWidgetByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Nutrition Widget by ID
     * Get a recipe&#39;s nutrition widget data.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID">Get Recipe Nutrition Widget by ID Documentation</a>
     */
    public Object getRecipeNutritionWidgetByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeNutritionWidgetByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Nutrition Widget by ID
     * Get a recipe&#39;s nutrition widget data.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID">Get Recipe Nutrition Widget by ID Documentation</a>
     */
    public ApiResponse<Object> getRecipeNutritionWidgetByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Nutrition Widget by ID (asynchronously)
     * Get a recipe&#39;s nutrition widget data.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID">Get Recipe Nutrition Widget by ID Documentation</a>
     */
    public okhttp3.Call getRecipeNutritionWidgetByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipePriceBreakdownByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID">Get Recipe Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call getRecipePriceBreakdownByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/priceBreakdownWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipePriceBreakdownByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipePriceBreakdownByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID">Get Recipe Price Breakdown by ID Documentation</a>
     */
    public Object getRecipePriceBreakdownByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipePriceBreakdownByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID">Get Recipe Price Breakdown by ID Documentation</a>
     */
    public ApiResponse<Object> getRecipePriceBreakdownByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Price Breakdown by ID (asynchronously)
     * Get a recipe&#39;s price breakdown data.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID">Get Recipe Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call getRecipePriceBreakdownByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeTasteByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID">Get Recipe Taste by ID Documentation</a>
     */
    public okhttp3.Call getRecipeTasteByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/tasteWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeTasteByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeTasteByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeTasteByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID">Get Recipe Taste by ID Documentation</a>
     */
    public Object getRecipeTasteByID(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = getRecipeTasteByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID">Get Recipe Taste by ID Documentation</a>
     */
    public ApiResponse<Object> getRecipeTasteByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeTasteByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Taste by ID (asynchronously)
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID">Get Recipe Taste by ID Documentation</a>
     */
    public okhttp3.Call getRecipeTasteByIDAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeTasteByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppingList
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public okhttp3.Call getShoppingListCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppingListValidateBeforeCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = getShoppingListCall(username, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public Object getShoppingList(String username, String hash) throws ApiException {
        ApiResponse<Object> localVarResp = getShoppingListWithHttpInfo(username, hash);
        return localVarResp.getData();
    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public ApiResponse<Object> getShoppingListWithHttpInfo(String username, String hash) throws ApiException {
        okhttp3.Call localVarCall = getShoppingListValidateBeforeCall(username, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shopping List (asynchronously)
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public okhttp3.Call getShoppingListAsync(String username, String hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppingListValidateBeforeCall(username, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarRecipes
     * @param id The id of the source recipe for which similar recipes should be found. (required)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public okhttp3.Call getSimilarRecipesCall(BigDecimal id, BigDecimal number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/similar"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarRecipesValidateBeforeCall(BigDecimal id, BigDecimal number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarRecipes(Async)");
        }
        

        okhttp3.Call localVarCall = getSimilarRecipesCall(id, number, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The id of the source recipe for which similar recipes should be found. (required)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public Object getSimilarRecipes(BigDecimal id, BigDecimal number, Boolean limitLicense) throws ApiException {
        ApiResponse<Object> localVarResp = getSimilarRecipesWithHttpInfo(id, number, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The id of the source recipe for which similar recipes should be found. (required)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public ApiResponse<Object> getSimilarRecipesWithHttpInfo(BigDecimal id, BigDecimal number, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = getSimilarRecipesValidateBeforeCall(id, number, limitLicense, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Similar Recipes (asynchronously)
     * Find recipes which are similar to the given one.
     * @param id The id of the source recipe for which similar recipes should be found. (required)
     * @param number The number of random recipes to be returned (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public okhttp3.Call getSimilarRecipesAsync(BigDecimal id, BigDecimal number, Boolean limitLicense, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarRecipesValidateBeforeCall(id, number, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWineDescription
     * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Description">Get Wine Description Documentation</a>
     */
    public okhttp3.Call getWineDescriptionCall(String wine, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/wine/description";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wine", wine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWineDescriptionValidateBeforeCall(String wine, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wine' is set
        if (wine == null) {
            throw new ApiException("Missing the required parameter 'wine' when calling getWineDescription(Async)");
        }
        

        okhttp3.Call localVarCall = getWineDescriptionCall(wine, _callback);
        return localVarCall;

    }

    /**
     * Get Wine Description
     * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
     * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Description">Get Wine Description Documentation</a>
     */
    public Object getWineDescription(String wine) throws ApiException {
        ApiResponse<Object> localVarResp = getWineDescriptionWithHttpInfo(wine);
        return localVarResp.getData();
    }

    /**
     * Get Wine Description
     * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
     * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Description">Get Wine Description Documentation</a>
     */
    public ApiResponse<Object> getWineDescriptionWithHttpInfo(String wine) throws ApiException {
        okhttp3.Call localVarCall = getWineDescriptionValidateBeforeCall(wine, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wine Description (asynchronously)
     * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
     * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Description">Get Wine Description Documentation</a>
     */
    public okhttp3.Call getWineDescriptionAsync(String wine, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWineDescriptionValidateBeforeCall(wine, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWinePairing
     * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Pairing">Get Wine Pairing Documentation</a>
     */
    public okhttp3.Call getWinePairingCall(String food, BigDecimal maxPrice, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/wine/pairing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (food != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("food", food));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPrice", maxPrice));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWinePairingValidateBeforeCall(String food, BigDecimal maxPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'food' is set
        if (food == null) {
            throw new ApiException("Missing the required parameter 'food' when calling getWinePairing(Async)");
        }
        

        okhttp3.Call localVarCall = getWinePairingCall(food, maxPrice, _callback);
        return localVarCall;

    }

    /**
     * Get Wine Pairing
     * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Pairing">Get Wine Pairing Documentation</a>
     */
    public Object getWinePairing(String food, BigDecimal maxPrice) throws ApiException {
        ApiResponse<Object> localVarResp = getWinePairingWithHttpInfo(food, maxPrice);
        return localVarResp.getData();
    }

    /**
     * Get Wine Pairing
     * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Pairing">Get Wine Pairing Documentation</a>
     */
    public ApiResponse<Object> getWinePairingWithHttpInfo(String food, BigDecimal maxPrice) throws ApiException {
        okhttp3.Call localVarCall = getWinePairingValidateBeforeCall(food, maxPrice, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wine Pairing (asynchronously)
     * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Pairing">Get Wine Pairing Documentation</a>
     */
    public okhttp3.Call getWinePairingAsync(String food, BigDecimal maxPrice, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWinePairingValidateBeforeCall(food, maxPrice, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWineRecommendation
     * @param wine The type of wine to get a specific product recommendation for. (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     * @param number The number of wine recommendations expected (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Recommendation">Get Wine Recommendation Documentation</a>
     */
    public okhttp3.Call getWineRecommendationCall(String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/wine/recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wine", wine));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPrice", maxPrice));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minRating", minRating));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWineRecommendationValidateBeforeCall(String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wine' is set
        if (wine == null) {
            throw new ApiException("Missing the required parameter 'wine' when calling getWineRecommendation(Async)");
        }
        

        okhttp3.Call localVarCall = getWineRecommendationCall(wine, maxPrice, minRating, number, _callback);
        return localVarCall;

    }

    /**
     * Get Wine Recommendation
     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
     * @param wine The type of wine to get a specific product recommendation for. (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     * @param number The number of wine recommendations expected (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Recommendation">Get Wine Recommendation Documentation</a>
     */
    public Object getWineRecommendation(String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = getWineRecommendationWithHttpInfo(wine, maxPrice, minRating, number);
        return localVarResp.getData();
    }

    /**
     * Get Wine Recommendation
     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
     * @param wine The type of wine to get a specific product recommendation for. (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     * @param number The number of wine recommendations expected (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Recommendation">Get Wine Recommendation Documentation</a>
     */
    public ApiResponse<Object> getWineRecommendationWithHttpInfo(String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = getWineRecommendationValidateBeforeCall(wine, maxPrice, minRating, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wine Recommendation (asynchronously)
     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
     * @param wine The type of wine to get a specific product recommendation for. (required)
     * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
     * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     * @param number The number of wine recommendations expected (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Wine-Recommendation">Get Wine Recommendation Documentation</a>
     */
    public okhttp3.Call getWineRecommendationAsync(String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWineRecommendationValidateBeforeCall(wine, maxPrice, minRating, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guessNutritionByDishName
     * @param title The title of the dish. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public okhttp3.Call guessNutritionByDishNameCall(String title, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/guessNutrition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guessNutritionByDishNameValidateBeforeCall(String title, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling guessNutritionByDishName(Async)");
        }
        

        okhttp3.Call localVarCall = guessNutritionByDishNameCall(title, _callback);
        return localVarCall;

    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public Object guessNutritionByDishName(String title) throws ApiException {
        ApiResponse<Object> localVarResp = guessNutritionByDishNameWithHttpInfo(title);
        return localVarResp.getData();
    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public ApiResponse<Object> guessNutritionByDishNameWithHttpInfo(String title) throws ApiException {
        okhttp3.Call localVarCall = guessNutritionByDishNameValidateBeforeCall(title, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guess Nutrition by Dish Name (asynchronously)
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public okhttp3.Call guessNutritionByDishNameAsync(String title, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = guessNutritionByDishNameValidateBeforeCall(title, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageAnalysisByURL
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public okhttp3.Call imageAnalysisByURLCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/images/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageUrl", imageUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageAnalysisByURLValidateBeforeCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageAnalysisByURL(Async)");
        }
        

        okhttp3.Call localVarCall = imageAnalysisByURLCall(imageUrl, _callback);
        return localVarCall;

    }

    /**
     * Image Analysis by URL
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public Object imageAnalysisByURL(String imageUrl) throws ApiException {
        ApiResponse<Object> localVarResp = imageAnalysisByURLWithHttpInfo(imageUrl);
        return localVarResp.getData();
    }

    /**
     * Image Analysis by URL
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public ApiResponse<Object> imageAnalysisByURLWithHttpInfo(String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = imageAnalysisByURLValidateBeforeCall(imageUrl, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Analysis by URL (asynchronously)
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public okhttp3.Call imageAnalysisByURLAsync(String imageUrl, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageAnalysisByURLValidateBeforeCall(imageUrl, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageClassificationByURL
     * @param imageUrl The URL of the image to be classified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public okhttp3.Call imageClassificationByURLCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/images/classify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageUrl", imageUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageClassificationByURLValidateBeforeCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageClassificationByURL(Async)");
        }
        

        okhttp3.Call localVarCall = imageClassificationByURLCall(imageUrl, _callback);
        return localVarCall;

    }

    /**
     * Image Classification by URL
     * Classify a food image. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be classified. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public Object imageClassificationByURL(String imageUrl) throws ApiException {
        ApiResponse<Object> localVarResp = imageClassificationByURLWithHttpInfo(imageUrl);
        return localVarResp.getData();
    }

    /**
     * Image Classification by URL
     * Classify a food image. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be classified. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public ApiResponse<Object> imageClassificationByURLWithHttpInfo(String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = imageClassificationByURLValidateBeforeCall(imageUrl, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Classification by URL (asynchronously)
     * Classify a food image. You can play around with that endpoint!
     * @param imageUrl The URL of the image to be classified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public okhttp3.Call imageClassificationByURLAsync(String imageUrl, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageClassificationByURLValidateBeforeCall(imageUrl, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingredientSearch
     * @param query The partial or full ingredient name. (required)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public okhttp3.Call ingredientSearchCall(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/ingredients/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (addChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addChildren", addChildren));
        }

        if (minProteinPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProteinPercent", minProteinPercent));
        }

        if (maxProteinPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProteinPercent", maxProteinPercent));
        }

        if (minFatPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFatPercent", minFatPercent));
        }

        if (maxFatPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFatPercent", maxFatPercent));
        }

        if (minCarbsPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbsPercent", minCarbsPercent));
        }

        if (maxCarbsPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbsPercent", maxCarbsPercent));
        }

        if (metaInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metaInformation", metaInformation));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingredientSearchValidateBeforeCall(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling ingredientSearch(Async)");
        }
        

        okhttp3.Call localVarCall = ingredientSearchCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The partial or full ingredient name. (required)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public Object ingredientSearch(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = ingredientSearchWithHttpInfo(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number);
        return localVarResp.getData();
    }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The partial or full ingredient name. (required)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public ApiResponse<Object> ingredientSearchWithHttpInfo(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = ingredientSearchValidateBeforeCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredient Search (asynchronously)
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The partial or full ingredient name. (required)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public okhttp3.Call ingredientSearchAsync(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingredientSearchValidateBeforeCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapIngredientsToGroceryProducts
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public okhttp3.Call mapIngredientsToGroceryProductsCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/food/ingredients/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapIngredientsToGroceryProductsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mapIngredientsToGroceryProducts(Async)");
        }
        

        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsCall(body, _callback);
        return localVarCall;

    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public Object mapIngredientsToGroceryProducts(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = mapIngredientsToGroceryProductsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public ApiResponse<Object> mapIngredientsToGroceryProductsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Map Ingredients to Grocery Products (asynchronously)
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public okhttp3.Call mapIngredientsToGroceryProductsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseIngredients
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings that you can make from the ingredients. (required)
     * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public okhttp3.Call parseIngredientsCall(String ingredientList, BigDecimal servings, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/parseIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        if (servings != null) {
            localVarFormParams.put("servings", servings);
        }

        if (includeNutrition != null) {
            localVarFormParams.put("includeNutrition", includeNutrition);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseIngredientsValidateBeforeCall(String ingredientList, BigDecimal servings, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling parseIngredients(Async)");
        }
        
        // verify the required parameter 'servings' is set
        if (servings == null) {
            throw new ApiException("Missing the required parameter 'servings' when calling parseIngredients(Async)");
        }
        

        okhttp3.Call localVarCall = parseIngredientsCall(ingredientList, servings, includeNutrition, _callback);
        return localVarCall;

    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings that you can make from the ingredients. (required)
     * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public Object parseIngredients(String ingredientList, BigDecimal servings, Boolean includeNutrition) throws ApiException {
        ApiResponse<Object> localVarResp = parseIngredientsWithHttpInfo(ingredientList, servings, includeNutrition);
        return localVarResp.getData();
    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings that you can make from the ingredients. (required)
     * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public ApiResponse<Object> parseIngredientsWithHttpInfo(String ingredientList, BigDecimal servings, Boolean includeNutrition) throws ApiException {
        okhttp3.Call localVarCall = parseIngredientsValidateBeforeCall(ingredientList, servings, includeNutrition, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parse Ingredients (asynchronously)
     * Extract an ingredient from plain text.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings that you can make from the ingredients. (required)
     * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public okhttp3.Call parseIngredientsAsync(String ingredientList, BigDecimal servings, Boolean includeNutrition, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseIngredientsValidateBeforeCall(ingredientList, servings, includeNutrition, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickAnswer
     * @param q The nutrition related question. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public okhttp3.Call quickAnswerCall(String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/quickAnswer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickAnswerValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling quickAnswer(Async)");
        }
        

        okhttp3.Call localVarCall = quickAnswerCall(q, _callback);
        return localVarCall;

    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public Object quickAnswer(String q) throws ApiException {
        ApiResponse<Object> localVarResp = quickAnswerWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public ApiResponse<Object> quickAnswerWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = quickAnswerValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Quick Answer (asynchronously)
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public okhttp3.Call quickAnswerAsync(String q, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickAnswerValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAllFood
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public okhttp3.Call searchAllFoodCall(String query, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAllFoodValidateBeforeCall(String query, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchAllFood(Async)");
        }
        

        okhttp3.Call localVarCall = searchAllFoodCall(query, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search All Food
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public Object searchAllFood(String query, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = searchAllFoodWithHttpInfo(query, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search All Food
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public ApiResponse<Object> searchAllFoodWithHttpInfo(String query, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = searchAllFoodValidateBeforeCall(query, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search All Food (asynchronously)
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public okhttp3.Call searchAllFoodAsync(String query, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAllFoodValidateBeforeCall(query, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCustomFoods
     * @param query The search query. (required)
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public okhttp3.Call searchCustomFoodsCall(String query, String username, String hash, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/customFoods/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCustomFoodsValidateBeforeCall(String query, String username, String hash, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchCustomFoods(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling searchCustomFoods(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling searchCustomFoods(Async)");
        }
        

        okhttp3.Call localVarCall = searchCustomFoodsCall(query, username, hash, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Custom Foods
     * Search custom foods in a user&#39;s account.
     * @param query The search query. (required)
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public Object searchCustomFoods(String query, String username, String hash, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = searchCustomFoodsWithHttpInfo(query, username, hash, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Custom Foods
     * Search custom foods in a user&#39;s account.
     * @param query The search query. (required)
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public ApiResponse<Object> searchCustomFoodsWithHttpInfo(String query, String username, String hash, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = searchCustomFoodsValidateBeforeCall(query, username, hash, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Custom Foods (asynchronously)
     * Search custom foods in a user&#39;s account.
     * @param query The search query. (required)
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public okhttp3.Call searchCustomFoodsAsync(String query, String username, String hash, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCustomFoodsValidateBeforeCall(query, username, hash, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFoodVideos
     * @param query The search query. (required)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public okhttp3.Call searchFoodVideosCall(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/videos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (includeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeIngredients", includeIngredients));
        }

        if (excludeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeIngredients", excludeIngredients));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFoodVideosValidateBeforeCall(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchFoodVideos(Async)");
        }
        

        okhttp3.Call localVarCall = searchFoodVideosCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Food Videos
     * Find recipe and other food related videos.
     * @param query The search query. (required)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public Object searchFoodVideos(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = searchFoodVideosWithHttpInfo(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Food Videos
     * Find recipe and other food related videos.
     * @param query The search query. (required)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public ApiResponse<Object> searchFoodVideosWithHttpInfo(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = searchFoodVideosValidateBeforeCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Food Videos (asynchronously)
     * Find recipe and other food related videos.
     * @param query The search query. (required)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of results to return (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public okhttp3.Call searchFoodVideosAsync(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFoodVideosValidateBeforeCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroceryProducts
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroceryProductsValidateBeforeCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchGroceryProducts(Async)");
        }
        

        okhttp3.Call localVarCall = searchGroceryProductsCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public Object searchGroceryProducts(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = searchGroceryProductsWithHttpInfo(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public ApiResponse<Object> searchGroceryProductsWithHttpInfo(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = searchGroceryProductsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Grocery Products (asynchronously)
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param offset The number of results to skip (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsAsync(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroceryProductsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroceryProductsByUPC
     * @param upc The product&#39;s UPC. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsByUPCCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/upc/{upc}"
            .replaceAll("\\{" + "upc" + "\\}", localVarApiClient.escapeString(upc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroceryProductsByUPCValidateBeforeCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upc' is set
        if (upc == null) {
            throw new ApiException("Missing the required parameter 'upc' when calling searchGroceryProductsByUPC(Async)");
        }
        

        okhttp3.Call localVarCall = searchGroceryProductsByUPCCall(upc, _callback);
        return localVarCall;

    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public Object searchGroceryProductsByUPC(BigDecimal upc) throws ApiException {
        ApiResponse<Object> localVarResp = searchGroceryProductsByUPCWithHttpInfo(upc);
        return localVarResp.getData();
    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public ApiResponse<Object> searchGroceryProductsByUPCWithHttpInfo(BigDecimal upc) throws ApiException {
        okhttp3.Call localVarCall = searchGroceryProductsByUPCValidateBeforeCall(upc, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Grocery Products by UPC (asynchronously)
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsByUPCAsync(BigDecimal upc, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroceryProductsByUPCValidateBeforeCall(upc, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchMenuItems
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the menu item must have. (optional)
     * @param maxCalories The maximum amount of calories the menu item can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
     * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
     * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
     * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
     * @param offset The offset number for paging (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 10). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Menu-Items">Search Menu Items Documentation</a>
     */
    public okhttp3.Call searchMenuItemsCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/menuItems/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMenuItemsValidateBeforeCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchMenuItems(Async)");
        }
        

        okhttp3.Call localVarCall = searchMenuItemsCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Menu Items
     * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the menu item must have. (optional)
     * @param maxCalories The maximum amount of calories the menu item can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
     * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
     * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
     * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
     * @param offset The offset number for paging (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 10). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Menu-Items">Search Menu Items Documentation</a>
     */
    public Object searchMenuItems(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
        ApiResponse<Object> localVarResp = searchMenuItemsWithHttpInfo(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Menu Items
     * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the menu item must have. (optional)
     * @param maxCalories The maximum amount of calories the menu item can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
     * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
     * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
     * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
     * @param offset The offset number for paging (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 10). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Menu-Items">Search Menu Items Documentation</a>
     */
    public ApiResponse<Object> searchMenuItemsWithHttpInfo(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = searchMenuItemsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Menu Items (asynchronously)
     * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
     * @param query The search query. (required)
     * @param minCalories The minimum amount of calories the menu item must have. (optional)
     * @param maxCalories The maximum amount of calories the menu item can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
     * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
     * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
     * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
     * @param offset The offset number for paging (between 0 and 990). (optional)
     * @param number The number of expected results (between 1 and 10). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Menu-Items">Search Menu Items Documentation</a>
     */
    public okhttp3.Call searchMenuItemsAsync(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMenuItemsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipes
     * @param query The (natural language) recipe search query. (required)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags User defined tags that have to match. The author param has to be set. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public okhttp3.Call searchRecipesCall(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/complexSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (excludeCuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeCuisine", excludeCuisine));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        if (equipment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("equipment", equipment));
        }

        if (includeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeIngredients", includeIngredients));
        }

        if (excludeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeIngredients", excludeIngredients));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (instructionsRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionsRequired", instructionsRequired));
        }

        if (fillIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillIngredients", fillIngredients));
        }

        if (addRecipeInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addRecipeInformation", addRecipeInformation));
        }

        if (addRecipeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addRecipeNutrition", addRecipeNutrition));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (recipeBoxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeBoxId", recipeBoxId));
        }

        if (titleMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("titleMatch", titleMatch));
        }

        if (maxReadyTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxReadyTime", maxReadyTime));
        }

        if (ignorePantry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignorePantry", ignorePantry));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (minAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minAlcohol", minAlcohol));
        }

        if (maxAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlcohol", maxAlcohol));
        }

        if (minCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCaffeine", minCaffeine));
        }

        if (maxCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCaffeine", maxCaffeine));
        }

        if (minCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCopper", minCopper));
        }

        if (maxCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCopper", maxCopper));
        }

        if (minCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalcium", minCalcium));
        }

        if (maxCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalcium", maxCalcium));
        }

        if (minCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholine", minCholine));
        }

        if (maxCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholine", maxCholine));
        }

        if (minCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholesterol", minCholesterol));
        }

        if (maxCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholesterol", maxCholesterol));
        }

        if (minFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFluoride", minFluoride));
        }

        if (maxFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFluoride", maxFluoride));
        }

        if (minSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSaturatedFat", minSaturatedFat));
        }

        if (maxSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSaturatedFat", maxSaturatedFat));
        }

        if (minVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminA", minVitaminA));
        }

        if (maxVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminA", maxVitaminA));
        }

        if (minVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminC", minVitaminC));
        }

        if (maxVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminC", maxVitaminC));
        }

        if (minVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminD", minVitaminD));
        }

        if (maxVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminD", maxVitaminD));
        }

        if (minVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminE", minVitaminE));
        }

        if (maxVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminE", maxVitaminE));
        }

        if (minVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminK", minVitaminK));
        }

        if (maxVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminK", maxVitaminK));
        }

        if (minVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB1", minVitaminB1));
        }

        if (maxVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB1", maxVitaminB1));
        }

        if (minVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB2", minVitaminB2));
        }

        if (maxVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB2", maxVitaminB2));
        }

        if (minVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB5", minVitaminB5));
        }

        if (maxVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB5", maxVitaminB5));
        }

        if (minVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB3", minVitaminB3));
        }

        if (maxVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB3", maxVitaminB3));
        }

        if (minVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB6", minVitaminB6));
        }

        if (maxVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB6", maxVitaminB6));
        }

        if (minVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB12", minVitaminB12));
        }

        if (maxVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB12", maxVitaminB12));
        }

        if (minFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFiber", minFiber));
        }

        if (maxFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFiber", maxFiber));
        }

        if (minFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolate", minFolate));
        }

        if (maxFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolate", maxFolate));
        }

        if (minFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolicAcid", minFolicAcid));
        }

        if (maxFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolicAcid", maxFolicAcid));
        }

        if (minIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIodine", minIodine));
        }

        if (maxIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIodine", maxIodine));
        }

        if (minIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIron", minIron));
        }

        if (maxIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIron", maxIron));
        }

        if (minMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minMagnesium", minMagnesium));
        }

        if (maxMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMagnesium", maxMagnesium));
        }

        if (minManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minManganese", minManganese));
        }

        if (maxManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxManganese", maxManganese));
        }

        if (minPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPhosphorus", minPhosphorus));
        }

        if (maxPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPhosphorus", maxPhosphorus));
        }

        if (minPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPotassium", minPotassium));
        }

        if (maxPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPotassium", maxPotassium));
        }

        if (minSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSelenium", minSelenium));
        }

        if (maxSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSelenium", maxSelenium));
        }

        if (minSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSodium", minSodium));
        }

        if (maxSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSodium", maxSodium));
        }

        if (minSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSugar", minSugar));
        }

        if (maxSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSugar", maxSugar));
        }

        if (minZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minZinc", minZinc));
        }

        if (maxZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxZinc", maxZinc));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesValidateBeforeCall(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchRecipes(Async)");
        }
        

        okhttp3.Call localVarCall = searchRecipesCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) recipe search query. (required)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags User defined tags that have to match. The author param has to be set. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public Object searchRecipes(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense) throws ApiException {
        ApiResponse<Object> localVarResp = searchRecipesWithHttpInfo(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) recipe search query. (required)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags User defined tags that have to match. The author param has to be set. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public ApiResponse<Object> searchRecipesWithHttpInfo(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesValidateBeforeCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes (asynchronously)
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) recipe search query. (required)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags User defined tags that have to match. The author param has to be set. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public okhttp3.Call searchRecipesAsync(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesValidateBeforeCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipesByIngredients
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (required)
     * @param number The maximum number of recipes to return (between 1 and 100). Defaults to 10. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public okhttp3.Call searchRecipesByIngredientsCall(String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/findByIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ingredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredients", ingredients));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        if (ranking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ranking", ranking));
        }

        if (ignorePantry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignorePantry", ignorePantry));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesByIngredientsValidateBeforeCall(String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredients' is set
        if (ingredients == null) {
            throw new ApiException("Missing the required parameter 'ingredients' when calling searchRecipesByIngredients(Async)");
        }
        

        okhttp3.Call localVarCall = searchRecipesByIngredientsCall(ingredients, number, limitLicense, ranking, ignorePantry, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes by Ingredients
     *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (required)
     * @param number The maximum number of recipes to return (between 1 and 100). Defaults to 10. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public Object searchRecipesByIngredients(String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
        ApiResponse<Object> localVarResp = searchRecipesByIngredientsWithHttpInfo(ingredients, number, limitLicense, ranking, ignorePantry);
        return localVarResp.getData();
    }

    /**
     * Search Recipes by Ingredients
     *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (required)
     * @param number The maximum number of recipes to return (between 1 and 100). Defaults to 10. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public ApiResponse<Object> searchRecipesByIngredientsWithHttpInfo(String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesByIngredientsValidateBeforeCall(ingredients, number, limitLicense, ranking, ignorePantry, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes by Ingredients (asynchronously)
     *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (required)
     * @param number The maximum number of recipes to return (between 1 and 100). Defaults to 10. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public okhttp3.Call searchRecipesByIngredientsAsync(String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesByIngredientsValidateBeforeCall(ingredients, number, limitLicense, ranking, ignorePantry, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipesByNutrients
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public okhttp3.Call searchRecipesByNutrientsCall(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/findByNutrients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (minAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minAlcohol", minAlcohol));
        }

        if (maxAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlcohol", maxAlcohol));
        }

        if (minCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCaffeine", minCaffeine));
        }

        if (maxCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCaffeine", maxCaffeine));
        }

        if (minCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCopper", minCopper));
        }

        if (maxCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCopper", maxCopper));
        }

        if (minCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalcium", minCalcium));
        }

        if (maxCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalcium", maxCalcium));
        }

        if (minCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholine", minCholine));
        }

        if (maxCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholine", maxCholine));
        }

        if (minCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholesterol", minCholesterol));
        }

        if (maxCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholesterol", maxCholesterol));
        }

        if (minFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFluoride", minFluoride));
        }

        if (maxFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFluoride", maxFluoride));
        }

        if (minSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSaturatedFat", minSaturatedFat));
        }

        if (maxSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSaturatedFat", maxSaturatedFat));
        }

        if (minVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminA", minVitaminA));
        }

        if (maxVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminA", maxVitaminA));
        }

        if (minVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminC", minVitaminC));
        }

        if (maxVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminC", maxVitaminC));
        }

        if (minVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminD", minVitaminD));
        }

        if (maxVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminD", maxVitaminD));
        }

        if (minVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminE", minVitaminE));
        }

        if (maxVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminE", maxVitaminE));
        }

        if (minVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminK", minVitaminK));
        }

        if (maxVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminK", maxVitaminK));
        }

        if (minVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB1", minVitaminB1));
        }

        if (maxVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB1", maxVitaminB1));
        }

        if (minVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB2", minVitaminB2));
        }

        if (maxVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB2", maxVitaminB2));
        }

        if (minVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB5", minVitaminB5));
        }

        if (maxVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB5", maxVitaminB5));
        }

        if (minVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB3", minVitaminB3));
        }

        if (maxVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB3", maxVitaminB3));
        }

        if (minVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB6", minVitaminB6));
        }

        if (maxVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB6", maxVitaminB6));
        }

        if (minVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB12", minVitaminB12));
        }

        if (maxVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB12", maxVitaminB12));
        }

        if (minFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFiber", minFiber));
        }

        if (maxFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFiber", maxFiber));
        }

        if (minFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolate", minFolate));
        }

        if (maxFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolate", maxFolate));
        }

        if (minFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolicAcid", minFolicAcid));
        }

        if (maxFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolicAcid", maxFolicAcid));
        }

        if (minIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIodine", minIodine));
        }

        if (maxIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIodine", maxIodine));
        }

        if (minIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIron", minIron));
        }

        if (maxIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIron", maxIron));
        }

        if (minMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minMagnesium", minMagnesium));
        }

        if (maxMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMagnesium", maxMagnesium));
        }

        if (minManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minManganese", minManganese));
        }

        if (maxManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxManganese", maxManganese));
        }

        if (minPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPhosphorus", minPhosphorus));
        }

        if (maxPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPhosphorus", maxPhosphorus));
        }

        if (minPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPotassium", minPotassium));
        }

        if (maxPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPotassium", maxPotassium));
        }

        if (minSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSelenium", minSelenium));
        }

        if (maxSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSelenium", maxSelenium));
        }

        if (minSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSodium", minSodium));
        }

        if (maxSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSodium", maxSodium));
        }

        if (minSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSugar", minSugar));
        }

        if (maxSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSugar", maxSugar));
        }

        if (minZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minZinc", minZinc));
        }

        if (maxZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxZinc", maxZinc));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (random != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("random", random));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesByNutrientsValidateBeforeCall(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchRecipesByNutrientsCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public Object searchRecipesByNutrients(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense) throws ApiException {
        ApiResponse<Object> localVarResp = searchRecipesByNutrientsWithHttpInfo(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public ApiResponse<Object> searchRecipesByNutrientsWithHttpInfo(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesByNutrientsValidateBeforeCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes by Nutrients (asynchronously)
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The number of expected results (between 1 and 100). (optional)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public okhttp3.Call searchRecipesByNutrientsAsync(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesByNutrientsValidateBeforeCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSiteContent
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public okhttp3.Call searchSiteContentCall(String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/site/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSiteContentValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchSiteContent(Async)");
        }
        

        okhttp3.Call localVarCall = searchSiteContentCall(query, _callback);
        return localVarCall;

    }

    /**
     * Search Site Content
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public Object searchSiteContent(String query) throws ApiException {
        ApiResponse<Object> localVarResp = searchSiteContentWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Search Site Content
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public ApiResponse<Object> searchSiteContentWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchSiteContentValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Site Content (asynchronously)
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public okhttp3.Call searchSiteContentAsync(String query, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSiteContentValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summarizeRecipe
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public okhttp3.Call summarizeRecipeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/summary"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summarizeRecipeValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling summarizeRecipe(Async)");
        }
        

        okhttp3.Call localVarCall = summarizeRecipeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public Object summarizeRecipe(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = summarizeRecipeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public ApiResponse<Object> summarizeRecipeWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = summarizeRecipeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summarize Recipe (asynchronously)
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public okhttp3.Call summarizeRecipeAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = summarizeRecipeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for talkToChatbot
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public okhttp3.Call talkToChatbotCall(String text, String contextId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/converse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (contextId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextId", contextId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call talkToChatbotValidateBeforeCall(String text, String contextId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling talkToChatbot(Async)");
        }
        

        okhttp3.Call localVarCall = talkToChatbotCall(text, contextId, _callback);
        return localVarCall;

    }

    /**
     * Talk to Chatbot
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public Object talkToChatbot(String text, String contextId) throws ApiException {
        ApiResponse<Object> localVarResp = talkToChatbotWithHttpInfo(text, contextId);
        return localVarResp.getData();
    }

    /**
     * Talk to Chatbot
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public ApiResponse<Object> talkToChatbotWithHttpInfo(String text, String contextId) throws ApiException {
        okhttp3.Call localVarCall = talkToChatbotValidateBeforeCall(text, contextId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Talk to Chatbot (asynchronously)
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public okhttp3.Call talkToChatbotAsync(String text, String contextId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = talkToChatbotValidateBeforeCall(text, contextId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeEquipment
     * @param instructions The recipe&#39;s instructions. (required)
     * @param view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Equipment">Visualize Equipment Documentation</a>
     */
    public okhttp3.Call visualizeEquipmentCall(String instructions, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizeEquipment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (instructions != null) {
            localVarFormParams.put("instructions", instructions);
        }

        if (view != null) {
            localVarFormParams.put("view", view);
        }

        if (defaultCss != null) {
            localVarFormParams.put("defaultCss", defaultCss);
        }

        if (showBacklink != null) {
            localVarFormParams.put("showBacklink", showBacklink);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeEquipmentValidateBeforeCall(String instructions, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'instructions' is set
        if (instructions == null) {
            throw new ApiException("Missing the required parameter 'instructions' when calling visualizeEquipment(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeEquipmentCall(instructions, view, defaultCss, showBacklink, _callback);
        return localVarCall;

    }

    /**
     * Visualize Equipment
     * Visualize the equipment used to make a recipe. You can play around with that endpoint!
     * @param instructions The recipe&#39;s instructions. (required)
     * @param view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Equipment">Visualize Equipment Documentation</a>
     */
    public String visualizeEquipment(String instructions, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        ApiResponse<String> localVarResp = visualizeEquipmentWithHttpInfo(instructions, view, defaultCss, showBacklink);
        return localVarResp.getData();
    }

    /**
     * Visualize Equipment
     * Visualize the equipment used to make a recipe. You can play around with that endpoint!
     * @param instructions The recipe&#39;s instructions. (required)
     * @param view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Equipment">Visualize Equipment Documentation</a>
     */
    public ApiResponse<String> visualizeEquipmentWithHttpInfo(String instructions, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        okhttp3.Call localVarCall = visualizeEquipmentValidateBeforeCall(instructions, view, defaultCss, showBacklink, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Equipment (asynchronously)
     * Visualize the equipment used to make a recipe. You can play around with that endpoint!
     * @param instructions The recipe&#39;s instructions. (required)
     * @param view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Equipment">Visualize Equipment Documentation</a>
     */
    public okhttp3.Call visualizeEquipmentAsync(String instructions, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeEquipmentValidateBeforeCall(instructions, view, defaultCss, showBacklink, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeIngredients
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
     * @param view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Ingredients">Visualize Ingredients Documentation</a>
     */
    public okhttp3.Call visualizeIngredientsCall(String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizeIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        if (servings != null) {
            localVarFormParams.put("servings", servings);
        }

        if (measure != null) {
            localVarFormParams.put("measure", measure);
        }

        if (view != null) {
            localVarFormParams.put("view", view);
        }

        if (defaultCss != null) {
            localVarFormParams.put("defaultCss", defaultCss);
        }

        if (showBacklink != null) {
            localVarFormParams.put("showBacklink", showBacklink);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeIngredientsValidateBeforeCall(String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling visualizeIngredients(Async)");
        }
        
        // verify the required parameter 'servings' is set
        if (servings == null) {
            throw new ApiException("Missing the required parameter 'servings' when calling visualizeIngredients(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeIngredientsCall(ingredientList, servings, measure, view, defaultCss, showBacklink, _callback);
        return localVarCall;

    }

    /**
     * Visualize Ingredients
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
     * @param view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Ingredients">Visualize Ingredients Documentation</a>
     */
    public String visualizeIngredients(String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        ApiResponse<String> localVarResp = visualizeIngredientsWithHttpInfo(ingredientList, servings, measure, view, defaultCss, showBacklink);
        return localVarResp.getData();
    }

    /**
     * Visualize Ingredients
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
     * @param view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Ingredients">Visualize Ingredients Documentation</a>
     */
    public ApiResponse<String> visualizeIngredientsWithHttpInfo(String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        okhttp3.Call localVarCall = visualizeIngredientsValidateBeforeCall(ingredientList, servings, measure, view, defaultCss, showBacklink, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Ingredients (asynchronously)
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
     * @param view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Ingredients">Visualize Ingredients Documentation</a>
     */
    public okhttp3.Call visualizeIngredientsAsync(String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeIngredientsValidateBeforeCall(ingredientList, servings, measure, view, defaultCss, showBacklink, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeMenuItemNutritionByID
     * @param id The menu item id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID">Visualize Menu Item Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeMenuItemNutritionByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/menuItems/{id}/nutritionWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeMenuItemNutritionByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeMenuItemNutritionByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeMenuItemNutritionByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Menu Item Nutrition by ID
     * Visualize a menu item&#39;s nutritional information as HTML including CSS.
     * @param id The menu item id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID">Visualize Menu Item Nutrition by ID Documentation</a>
     */
    public String visualizeMenuItemNutritionByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeMenuItemNutritionByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Menu Item Nutrition by ID
     * Visualize a menu item&#39;s nutritional information as HTML including CSS.
     * @param id The menu item id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID">Visualize Menu Item Nutrition by ID Documentation</a>
     */
    public ApiResponse<String> visualizeMenuItemNutritionByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeMenuItemNutritionByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Menu Item Nutrition by ID (asynchronously)
     * Visualize a menu item&#39;s nutritional information as HTML including CSS.
     * @param id The menu item id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID">Visualize Menu Item Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeMenuItemNutritionByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeMenuItemNutritionByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizePriceBreakdown
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown">Visualize Price Breakdown Documentation</a>
     */
    public okhttp3.Call visualizePriceBreakdownCall(String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizePriceEstimator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        if (servings != null) {
            localVarFormParams.put("servings", servings);
        }

        if (mode != null) {
            localVarFormParams.put("mode", mode);
        }

        if (defaultCss != null) {
            localVarFormParams.put("defaultCss", defaultCss);
        }

        if (showBacklink != null) {
            localVarFormParams.put("showBacklink", showBacklink);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizePriceBreakdownValidateBeforeCall(String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling visualizePriceBreakdown(Async)");
        }
        
        // verify the required parameter 'servings' is set
        if (servings == null) {
            throw new ApiException("Missing the required parameter 'servings' when calling visualizePriceBreakdown(Async)");
        }
        

        okhttp3.Call localVarCall = visualizePriceBreakdownCall(ingredientList, servings, mode, defaultCss, showBacklink, _callback);
        return localVarCall;

    }

    /**
     * Visualize Price Breakdown
     * Visualize the price breakdown of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown">Visualize Price Breakdown Documentation</a>
     */
    public String visualizePriceBreakdown(String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        ApiResponse<String> localVarResp = visualizePriceBreakdownWithHttpInfo(ingredientList, servings, mode, defaultCss, showBacklink);
        return localVarResp.getData();
    }

    /**
     * Visualize Price Breakdown
     * Visualize the price breakdown of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown">Visualize Price Breakdown Documentation</a>
     */
    public ApiResponse<String> visualizePriceBreakdownWithHttpInfo(String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        okhttp3.Call localVarCall = visualizePriceBreakdownValidateBeforeCall(ingredientList, servings, mode, defaultCss, showBacklink, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Price Breakdown (asynchronously)
     * Visualize the price breakdown of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown">Visualize Price Breakdown Documentation</a>
     */
    public okhttp3.Call visualizePriceBreakdownAsync(String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizePriceBreakdownValidateBeforeCall(ingredientList, servings, mode, defaultCss, showBacklink, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeProductNutritionByID
     * @param id The id of the product. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID">Visualize Product Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeProductNutritionByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/products/{id}/nutritionWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeProductNutritionByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeProductNutritionByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeProductNutritionByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Product Nutrition by ID
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The id of the product. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID">Visualize Product Nutrition by ID Documentation</a>
     */
    public String visualizeProductNutritionByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeProductNutritionByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Product Nutrition by ID
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The id of the product. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID">Visualize Product Nutrition by ID Documentation</a>
     */
    public ApiResponse<String> visualizeProductNutritionByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeProductNutritionByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Product Nutrition by ID (asynchronously)
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The id of the product. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID">Visualize Product Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeProductNutritionByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeProductNutritionByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeEquipmentByID
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID">Visualize Recipe Equipment by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeEquipmentByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/equipmentWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeEquipmentByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Equipment by ID
     * Visualize a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID">Visualize Recipe Equipment by ID Documentation</a>
     */
    public String visualizeRecipeEquipmentByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeEquipmentByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Equipment by ID
     * Visualize a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID">Visualize Recipe Equipment by ID Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeEquipmentByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Equipment by ID (asynchronously)
     * Visualize a recipe&#39;s equipment list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID">Visualize Recipe Equipment by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeEquipmentByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeIngredientsByID
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID">Visualize Recipe Ingredients by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeIngredientsByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeIngredientsByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Ingredients by ID
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID">Visualize Recipe Ingredients by ID Documentation</a>
     */
    public String visualizeRecipeIngredientsByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeIngredientsByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Ingredients by ID
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID">Visualize Recipe Ingredients by ID Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeIngredientsByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Ingredients by ID (asynchronously)
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID">Visualize Recipe Ingredients by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeIngredientsByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeNutrition
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition">Visualize Recipe Nutrition Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionCall(String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizeNutrition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        if (servings != null) {
            localVarFormParams.put("servings", servings);
        }

        if (defaultCss != null) {
            localVarFormParams.put("defaultCss", defaultCss);
        }

        if (showBacklink != null) {
            localVarFormParams.put("showBacklink", showBacklink);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeNutritionValidateBeforeCall(String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling visualizeRecipeNutrition(Async)");
        }
        
        // verify the required parameter 'servings' is set
        if (servings == null) {
            throw new ApiException("Missing the required parameter 'servings' when calling visualizeRecipeNutrition(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeNutritionCall(ingredientList, servings, defaultCss, showBacklink, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Nutrition
     * Visualize a recipe&#39;s nutritional information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition">Visualize Recipe Nutrition Documentation</a>
     */
    public String visualizeRecipeNutrition(String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeNutritionWithHttpInfo(ingredientList, servings, defaultCss, showBacklink);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Nutrition
     * Visualize a recipe&#39;s nutritional information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition">Visualize Recipe Nutrition Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeNutritionWithHttpInfo(String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeNutritionValidateBeforeCall(ingredientList, servings, defaultCss, showBacklink, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Nutrition (asynchronously)
     * Visualize a recipe&#39;s nutritional information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param servings The number of servings. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition">Visualize Recipe Nutrition Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionAsync(String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeNutritionValidateBeforeCall(ingredientList, servings, defaultCss, showBacklink, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeNutritionByID
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID">Visualize Recipe Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeNutritionByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeNutritionByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Nutrition by ID
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID">Visualize Recipe Nutrition by ID Documentation</a>
     */
    public String visualizeRecipeNutritionByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeNutritionByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Nutrition by ID
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID">Visualize Recipe Nutrition by ID Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeNutritionByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Nutrition by ID (asynchronously)
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID">Visualize Recipe Nutrition by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipePriceBreakdownByID
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID">Visualize Recipe Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipePriceBreakdownByIDCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/priceBreakdownWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipePriceBreakdownByIDValidateBeforeCall(BigDecimal id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Price Breakdown by ID
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID">Visualize Recipe Price Breakdown by ID Documentation</a>
     */
    public String visualizeRecipePriceBreakdownByID(BigDecimal id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipePriceBreakdownByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Price Breakdown by ID
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID">Visualize Recipe Price Breakdown by ID Documentation</a>
     */
    public ApiResponse<String> visualizeRecipePriceBreakdownByIDWithHttpInfo(BigDecimal id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Price Breakdown by ID (asynchronously)
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID">Visualize Recipe Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipePriceBreakdownByIDAsync(BigDecimal id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeTaste
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste">Visualize Recipe Taste Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteCall(String ingredientList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/visualizeTaste";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ingredientList != null) {
            localVarFormParams.put("ingredientList", ingredientList);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeTasteValidateBeforeCall(String ingredientList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientList' is set
        if (ingredientList == null) {
            throw new ApiException("Missing the required parameter 'ingredientList' when calling visualizeRecipeTaste(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeTasteCall(ingredientList, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Taste
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste">Visualize Recipe Taste Documentation</a>
     */
    public String visualizeRecipeTaste(String ingredientList) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeTasteWithHttpInfo(ingredientList);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Taste
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste">Visualize Recipe Taste Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeTasteWithHttpInfo(String ingredientList) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeTasteValidateBeforeCall(ingredientList, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Taste (asynchronously)
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste">Visualize Recipe Taste Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteAsync(String ingredientList, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeTasteValidateBeforeCall(ingredientList, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeTasteByID
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID">Visualize Recipe Taste by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteByIDCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/recipes/{id}/tasteWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeTasteByIDValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeTasteByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeTasteByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Visualize Recipe Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID">Visualize Recipe Taste by ID Documentation</a>
     */
    public String visualizeRecipeTasteByID(BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeTasteByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Visualize Recipe Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID">Visualize Recipe Taste by ID Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeTasteByIDWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeTasteByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualize Recipe Taste by ID (asynchronously)
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID">Visualize Recipe Taste by ID Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteByIDAsync(BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeTasteByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
